### VARIABLES ###
variables:
  DOCKER_BUILDKIT: '1'
  NGINX_VERSION: 'nginx:mainline-alpine3.18-slim'
  BUN_VERSION: 'oven/bun:1.2.2'
  HOST_PROJECT_DIR: /srv/docker/${CI_PROJECT_PATH}
  GET_IP_SH: 'IyEvYmluL2Jhc2gKCmV4cG9ydCBhbGlhcz0ke0NJX1BST0pFQ1RfUEFUSF9TTFVHfQphbGlhc19hc19ieXRlYXJyYXk9JChlY2hvIC1uICRhbGlhcyB8IHNoYTI1NnN1bSB8IGhlYWQgLWMgOCB8IHh4ZCAtciAtcCB8IG9kIC1BbiAtdHUxIHwgdHIgJ1xuJyAnICcpCmFsaWFzX2FzX2J5dGVhcnJheT0oJGFsaWFzX2FzX2J5dGVhcnJheSkKYWxpYXNfYXNfYnl0ZWFycmF5WzBdPTEyNwpmaW5hbF9pcD0kKGVjaG8gJHthbGlhc19hc19ieXRlYXJyYXlbQF19IHwgYXdrICd7cHJpbnRmICIlZC4lZC4lZC4lZFxuIiwgJDEsICQyLCAkMywgJDR9JykKZWNobyAkZmluYWxfaXAKCg=='
  CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:dev_full
  CONTAINER_NAME: ${CI_PROJECT_PATH_SLUG}
  COMPOSE_NAME: ${CI_PROJECT_ROOT_NAMESPACE}
  PROD_REGISTRY_REPO: docker.infra.cloveri.com/sigma/production

### TEMPLATES ###
.ssh-add: &ssh-add
  - eval $(ssh-agent -s) > /dev/null 2>&1
  - echo $GATE_KEY | base64 -d | ssh-add - > /dev/null 2>&1
  - echo $HOST_KEY | base64 -d | ssh-add - > /dev/null 2>&1

### PIPELINE ###
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

stages:
  - init
  - test
  - build
  - deploy
  - build_prod

init:
  stage: init
  tags: [docker]
  script: # Update docker credetionals
    - echo CI_REGISTRY_IMAGE=$(echo $CI_REGISTRY_IMAGE | sed -r "s/(.*):8090(.*)/\1\2/") >> build.env
    - echo CI_REGISTRY=$(echo $CI_REGISTRY | sed -r "s/(.*):8090(.*)/\1\2/") >> build.env
    - echo SERVICE_IP=$(echo $GET_IP_SH | base64 -d | bash) >> build.env
  artifacts:
    reports:
      dotenv: build.env

test-build:
  stage: test
  tags: [docker]
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
  script:
    - cp $ENV_FILE ./.env.production
    - > #
      docker build --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      --build-arg BUILDER=${DOCKER_HUB_MIRROR}${BUN_VERSION}-alpine 
      --build-arg APP_RUNNER=${NGINX_VERSION} 
      --build-arg BUILD_VERSION=${CI_COMMIT_SHORT_SHA} .
  after_script:
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA || true
    - if [ $(df / --output='pcent' | grep -o "[0-9]*") -gt 80 ]; then docker system prune -f; fi

lint:
  stage: test
  tags: [docker]
  rules:
    - if: $CI_COMMIT_BRANCH != "master"
  allow_failure: true
  script:
    - > #
      docker create --rm --name bunlint-${CI_COMMIT_SHORT_SHA} ${DOCKER_HUB_MIRROR}${BUN_VERSION}-debian 
      bash -c "bunx @biomejs/biome lint --colors=force" > /dev/null &&
      docker cp ./ bunlint-${CI_COMMIT_SHORT_SHA}:/home/bun/app > /dev/null
    - docker start -a bunlint-${CI_COMMIT_SHORT_SHA}
  after_script:
    - if [ $(df / --output='pcent' | grep -o "[0-9]*") -gt 80 ]; then docker system prune -f; fi

.build-image:
  stage: build
  tags: [docker]
  variables:
    BUILD_VERSION: $CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH =~ /^cicd.*/
      when: manual
    - if: $CI_COMMIT_TAG
      variables:
        BUILD_VERSION: $CI_COMMIT_TAG
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$DOCKER_TAG_NEW || true
    - docker tag $CI_REGISTRY_IMAGE:$DOCKER_TAG_NEW $CI_REGISTRY_IMAGE:$DOCKER_TAG_OLD || true
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG_OLD || true
  script:
    - cp $ENV_FILE ./.env.production
    - > #
      docker build  --cache-from $CI_REGISTRY_IMAGE:$DOCKER_TAG_OLD
      --tag $CI_REGISTRY_IMAGE:$DOCKER_TAG_NEW
      --build-arg BUILDER=${DOCKER_HUB_MIRROR}${BUN_VERSION}-alpine
      --build-arg APP_RUNNER=${DOCKER_HUB_MIRROR}${NGINX_VERSION}
      --build-arg VITE_BASE_URL=${VITE_BASE_URL}
      --build-arg BUILD_VERSION=${BUILD_VERSION} .
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG_NEW
  after_script:
    - if [ $(df / --output='pcent' | grep -o "[0-9]*") -gt 80 ]; then docker system prune -f; fi

build-image-dev:
  extends: .build-image
  parallel:
    matrix:
      - DOCKER_TAG_OLD: old_dev
        DOCKER_TAG_NEW: dev
        VITE_BASE_URL: '/'
      - DOCKER_TAG_OLD: old_dev_full
        DOCKER_TAG_NEW: dev_full
        VITE_BASE_URL: $FRONT_BASE_URL

build-image-prod:
  extends: .build-image
  stage: build_prod
  environment:
    name: prod
    action: prepare
  parallel:
    matrix:
      - DOCKER_TAG_OLD: old_prod
        DOCKER_TAG_NEW: latest
        VITE_BASE_URL: '/'
      - DOCKER_TAG_OLD: old_prod_full
        DOCKER_TAG_NEW: latest_full
        VITE_BASE_URL: $FRONT_BASE_URL

deploy-job:
  stage: deploy
  tags: [docker]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH =~ /^cicd.*/
      when: manual
  variables:
    DOCKER_COMPOSE_PORT: '${SERVICE_IP}:8080'
  before_script:
    - *ssh-add
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo $SERVICE_IP
    - > # Make project dir
      ssh -F $SSH_CONF cloveri.host "mkdir -p ${HOST_PROJECT_DIR} || true"
    - rsync --delete -auzvpe "ssh -F $SSH_CONF" compose-deploy.yml cloveri.host:${HOST_PROJECT_DIR}/docker-compose.yml
    - > # Set env vars and run container
      ssh -F $SSH_CONF cloveri.host "
        echo IMAGE=$CONTAINER_IMAGE > ${HOST_PROJECT_DIR}/.env &&
        echo CONTAINER_NAME=$CONTAINER_NAME >> ${HOST_PROJECT_DIR}/.env &&
        echo COMPOSE_NAME=$COMPOSE_NAME >> ${HOST_PROJECT_DIR}/.env &&
        echo PORT=$DOCKER_COMPOSE_PORT >> ${HOST_PROJECT_DIR}/.env &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        cd ${HOST_PROJECT_DIR} && docker compose pull && docker compose up -d "

push-to-prod:
  stage: deploy
  tags: [docker]
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH =~ /^cicd.*/
      when: manual
  variables:
    PROD_REGISTRY: $CI_REGISTRY
  before_script:
    #   Стараемся сохранить предыдущий образ на случай быстрого отката
    - docker login -u $PROD_REGISTRY_USER -p $PROD_REGISTRY_PASSWORD $PROD_REGISTRY
    - docker pull $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest_full || true
    - docker tag $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest_full $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:old || true
    - docker push $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:old || true
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker image tag $CI_REGISTRY_IMAGE:latest $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest
    - docker pull $CI_REGISTRY_IMAGE:latest_full
    - docker image tag $CI_REGISTRY_IMAGE:latest_full $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest_full
    - docker login -u $PROD_REGISTRY_USER -p $PROD_REGISTRY_PASSWORD $PROD_REGISTRY
    - docker push $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest
    - docker push $PROD_REGISTRY_REPO/$CI_PROJECT_NAME:latest_full
